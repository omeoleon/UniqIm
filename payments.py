import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from database.models import Payment  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ Payment
from services.payments import payment_system

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("pay", "balance"))
async def pay_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        builder = InlineKeyboardBuilder()
        amounts = [100, 300, 500, 1000]  # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã
        
        for amount in amounts:
            builder.button(
                text=f"{amount} RUB", 
                callback_data=f"deposit:{amount}"
            )
        
        builder.adjust(2, 2)
        
        balance = await payment_system.get_user_balance(message.from_user.id)
        
        await message.answer(
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} RUB\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Pay command error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data.startswith("deposit:"))
async def process_deposit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã"""
    try:
        amount = int(callback.data.split(":")[1])
        payment_url, error = await payment_system.create_payment(
            user_id=callback.from_user.id,
            amount=amount,
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        )
        
        if payment_url:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", 
                    url=payment_url
                ),
                InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                    callback_data=f"check:{amount}"
                )
            )
            
            await callback.message.edit_text(
                f"<b>–°—á–µ—Ç –Ω–∞ {amount} RUB</b>\n\n"
                "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer(f"–û—à–∏–±–∫–∞: {error}", show_alert=True)
            
    except Exception as e:
        logger.error(f"Deposit error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data.startswith("check:"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        amount = int(callback.data.split(":")[1])
        last_payment = await Payment.filter(
            user_id=callback.from_user.id
        ).order_by("-created_at").first()
        
        if not last_payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        payment_data, error = await payment_system.check_payment(last_payment.payment_id)
        
        if error:
            await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}", show_alert=True)
        elif payment_data["status"] == "paid":
            balance = await payment_system.get_user_balance(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} RUB"
            )
        else:
            await callback.answer("‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            
    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)
    finally:
        await callback.answer()

__all__ = ['router']