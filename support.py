import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from config import config
from database.models import SupportTicket, User
from utils.states import SupportStates
from utils.helpers import escape_markdown

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(Command("support"))
async def support_menu(message: Message):
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="create_ticket")
    builder.button(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")
    builder.button(text="üí° –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")
    builder.adjust(1)
    
    await message.answer(
        "üõ† *–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )

@router.callback_query(F.data == "create_ticket")
async def start_ticket_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await callback.message.edit_text(
        "‚úçÔ∏è *–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
        "1\\. –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
        "2\\. –ö–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
        "3\\. –ö–∞–∫–æ–≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
        parse_mode="MarkdownV2"
    )
    await state.set_state(SupportStates.waiting_for_ticket_text)
    await callback.answer()

@router.message(SupportStates.waiting_for_ticket_text)
async def process_ticket_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if len(message.text) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
        
    ticket = await SupportTicket.create(
        user_id=message.from_user.id,
        username=message.from_user.username,
        text=message.text,
        status="open"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    await notify_admins_about_new_ticket(message.bot, ticket)
    
    await message.answer(
        "‚úÖ *–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ\!*\n\n"
        f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: `{ticket.id}`\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        parse_mode="MarkdownV2"
    )
    await state.clear()

async def notify_admins_about_new_ticket(bot, ticket):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    admin_message = (
        "üÜï *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*\n\n"
        f"ID: `{ticket.id}`\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.username} \| `{ticket.user_id}`\n"
        f"–î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"*–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:*\n"
        f"{escape_markdown(ticket.text)}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket_{ticket.id}")
    
    for admin_id in config.ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                reply_markup=builder.as_markup(),
                parse_mode="MarkdownV2"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

@router.callback_query(F.data == "my_tickets")
async def show_user_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tickets = await SupportTicket.filter(
        user_id=callback.from_user.id
    ).order_by("-created_at").limit(5)
    
    if not tickets:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        await callback.answer()
        return
        
    tickets_text = "üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è*\n\n"
    for ticket in tickets:
        status_icon = "üü¢" if ticket.status == "open" else "üî¥" if ticket.status == "closed" else "üü°"
        tickets_text += (
            f"{status_icon} *–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}*\n"
            f"–°—Ç–∞—Ç—É—Å: {ticket.status}\n"
            f"–î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="support_back")
    
    await callback.message.edit_text(
        tickets_text,
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("reply_ticket_"))
async def start_ticket_reply(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–∞–¥–º–∏–Ω)"""
    ticket_id = int(callback.data.split("_")[2])
    ticket = await SupportTicket.get_or_none(id=ticket_id)
    
    if not ticket:
        await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
        
    await state.update_data(ticket_id=ticket_id, user_id=ticket.user_id)
    await callback.message.answer(
        f"‚úçÔ∏è *–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
        parse_mode="MarkdownV2"
    )
    await state.set_state(SupportStates.waiting_for_reply_text)
    await callback.answer()

@router.message(SupportStates.waiting_for_reply_text)
async def process_ticket_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    data = await state.get_data()
    ticket_id = data["ticket_id"]
    user_id = data["user_id"]
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        await SupportTicket.filter(id=ticket_id).update(
            status="answered",
            admin_id=message.from_user.id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            user_id,
            f"üì® *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}*\n\n"
            f"{message.text}\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
            parse_mode="MarkdownV2"
        )
        
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Failed to send ticket reply: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
    finally:
        await state.clear()

@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    faq_text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
        "1\\. *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
        "2\\. *–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω—ã?*\n"
        "–£ –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞: Crocodile, Dolphin –∏ Grizzly Room\n\n"
        "3\\. *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ?*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ 1GB\n\n"
        "4\\. *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?*\n"
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="support_back")
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@router.callback_query(F.data == "support_back")
async def back_to_support(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await support_menu(callback.message)
    await callback.answer()