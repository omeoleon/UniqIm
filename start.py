import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.utils.markdown import hbold
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏/–≤—Ä–µ–º–µ–Ω–µ–º

from config import config
from database.models import User, Referral
from handlers.payments import payment_system
from utils.helpers import escape_markdown

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await User.get_or_create(
            id=message.from_user.id,
            defaults={
                'username': message.from_user.username,
                'full_name': message.from_user.full_name,
                'balance': 0.0,
                'registered_at': datetime.now()
            }
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if len(message.text.split()) > 1 and message.text.split()[1].startswith('ref_'):
            await handle_referral(message)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if not created:
            await user.update_from_dict({
                'username': message.from_user.username,
                'full_name': message.from_user.full_name
            }).save()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await send_welcome_message(message, user, created)

    except Exception as e:
        logger.error(f"Start command error: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def handle_referral(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    referrer_id = int(message.text.split()[1].split('_')[1])
    
    # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if referrer_id == message.from_user.id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if not await Referral.exists(user_id=message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
        await Referral.create(
            user_id=message.from_user.id,
            referrer_id=referrer_id
        )

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        referrer = await User.get_or_none(id=referrer_id)
        if referrer:
            new_balance = referrer.balance + config.REFERRAL_BONUS
            await referrer.update(balance=new_balance).apply()

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await payment_system.record_payment(
                user_id=referrer_id,
                amount=config.REFERRAL_BONUS,
                description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await message.bot.send_message(
                    referrer_id,
                    f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {config.REFERRAL_BONUS} RUB –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n"
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} RUB"
                )
            except Exception as e:
                logger.error(f"Failed to notify referrer: {e}")

async def send_welcome_message(message: Message, user: User, is_new: bool):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    main_kb = ReplyKeyboardBuilder()
    main_kb.button(text="üé• –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ")
    main_kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    main_kb.button(text="üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    main_kb.adjust(2, 1)

    # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    inline_kb = InlineKeyboardBuilder()
    if is_new:
        inline_kb.button(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å", callback_data="start_bonus")
        inline_kb.button(text="üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")
        inline_kb.adjust(1)

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é:\n"
        "üêä Crocodile Room - —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã\n"
        "üê¨ Dolphin Room - —à—É–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏\n"
        "üêª Grizzly Room - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –æ–±—Ä–µ–∑–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(
        text,
        reply_markup=main_kb.as_markup(resize_keyboard=True)
    )

    if is_new:
        await message.answer(
            "üéÅ –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å!",
            reply_markup=inline_kb.as_markup()
        )

@router.callback_query(F.data == "start_bonus")
async def give_start_bonus(callback: CallbackQuery):
    """–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user = await User.get(callback.from_user.id)
    
    if user.balance > 0:
        await callback.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Ä–∞–Ω–µ–µ", show_alert=True)
        return
    
    bonus_amount = config.START_BONUS
    await user.update(balance=user.balance + bonus_amount).apply()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await payment_system.record_payment(
        user_id=user.id,
        amount=bonus_amount,
        description="–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å"
    )
    
    await callback.message.edit_text(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å {bonus_amount} RUB!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bonus_amount} RUB"
    )
    await callback.answer()

@router.callback_query(F.data == "invite_friends")
async def invite_friends(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref_{callback.from_user.id}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"tg://msg_url?text={ref_link}")
    
    await callback.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"<code>{ref_link}</code>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {config.REFERRAL_BONUS} RUB –∑–∞ –∫–∞–∂–¥–æ–≥–æ!",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.message(F.text == "üé• –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ")
async def process_video_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    await message.answer("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /process")

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile")

@router.message(F.text == "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support")