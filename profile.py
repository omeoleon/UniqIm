import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram.fsm.context import FSMContext
import asyncio
from utils.states import PaymentStates

from config import config
from database.models import User, Payment, VideoProcessing, Referral
from handlers.payments import payment_system
from utils.helpers import format_rub
from utils.states import PaymentStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("profile"))
async def show_profile(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        user, created = await User.get_or_create(
            id=message.from_user.id,
            defaults={
                'username': message.from_user.username,
                'full_name': message.from_user.full_name,
                'balance': 0.0,
                'registered_at': datetime.now()
            }
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        stats = await asyncio.gather(
            VideoProcessing.filter(user_id=user.id).count(),
            VideoProcessing.filter(user_id=user.id).count() * config.VIDEO_PRICE,
            Referral.filter(referrer_id=user.id).count(),
            Payment.filter(user_id=user.id, description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ").sum("amount"),
            _get_total_deposits(user.id)
        )
        
        processed_videos, total_spent, referrals_count, referral_income, total_deposits = stats

        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user.id}</code>\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registered_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_rub(user.balance)}\n"
            f"üí≥ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {format_rub(total_deposits)}\n"
            f"üé• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {processed_videos}\n"
            f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_rub(total_spent)}\n\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {format_rub(referral_income or 0)}\n"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")
        if referrals_count > 0:
            builder.button(text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")
        builder.button(text="üì§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral_link")
        builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="payment_history")
        builder.adjust(1)

        await message.answer(profile_text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Profile error: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data == "deposit")
async def deposit_balance(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã"""
    try:
        builder = InlineKeyboardBuilder()
        amounts = [30, 100, 300, 500, 1000]  # 30 RUB - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        
        for amount in amounts:
            builder.button(text=f"{format_rub(amount)}", callback_data=f"deposit_{amount}")
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_back")
        builder.adjust(2)
        
        await callback.message.edit_text(
            "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {format_rub(config.VIDEO_PRICE)}",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Deposit menu error: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    finally:
        await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (process_deposit, check_payment –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def _get_total_deposits(user_id: int) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    result = await Payment.filter(
        user_id=user_id,
        status="paid",
        description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
    ).sum("amount")
    return result if result else 0.0