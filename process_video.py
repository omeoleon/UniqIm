import logging
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from typing import Optional  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

from config import config
from database.models import User, VideoProcessing
from services.video_editor import VideoEditor
from services.cache import video_cache
from handlers.payments import payment_system
from utils.states import VideoProcessingStates
from utils.helpers import format_timedelta

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

video_editor = VideoEditor()

@router.message(Command("process"))
async def start_video_processing(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    user = await User.get(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if user.balance < config.VIDEO_PRICE:
        await message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {config.VIDEO_PRICE} RUB\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /pay"
        )
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üêä Crocodile Room", callback_data="method_crocodile")
    builder.button(text="üê¨ Dolphin Room", callback_data="method_dolphin")
    builder.button(text="üêª Grizzly Room", callback_data="method_grizzly")
    builder.adjust(1)

    await message.answer(
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:\n\n"
        "üêä <b>Crocodile Room</b> - —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è, —ç—Ñ—Ñ–µ–∫—Ç—ã\n"
        "üê¨ <b>Dolphin Room</b> - —à—É–º—ã, –∞–Ω–∏–º–∞—Ü–∏–∏\n"
        "üêª <b>Grizzly Room</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –æ–±—Ä–µ–∑–∫–∞",
        reply_markup=builder.as_markup()
    )
    await state.set_state(VideoProcessingStates.waiting_for_method)

@router.callback_query(F.data.startswith("method_"), VideoProcessingStates.waiting_for_method)
async def select_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞"""
    method = callback.data.split("_")[1]
    await state.update_data(method=method)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {method.capitalize()} Room\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ 1GB)"
    )
    await state.set_state(VideoProcessingStates.waiting_for_video)
    await callback.answer()

@router.message(F.video, VideoProcessingStates.waiting_for_video)
async def process_video_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    user = await User.get(message.from_user.id)
    if not user or user.balance < config.VIDEO_PRICE:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        data = await state.get_data()
        method = data["method"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        file_id = message.video.file_id
        file_name = message.video.file_name or f"video_{file_id}.mp4"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        file_path = await _download_video(message.bot, file_id, file_name)
        
        if not file_path:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cached_path := video_cache.get_cached_video(file_path, method):
            await message.answer("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
            output_path = cached_path
        else:
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            await user.update(balance=user.balance - config.VIDEO_PRICE).apply()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            await message.answer(f"üõ†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –º–µ—Ç–æ–¥–æ–º {method}...")
            output_path = await video_editor.process_video(file_path, method)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            video_cache.add_to_cache(file_path, output_path, method)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await VideoProcessing.create(
            user_id=user.id,
            method=method,
            original_file=file_name,
            processed_file=output_path.name,
            file_size=output_path.stat().st_size
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_path, "rb") as video_file:
            await message.answer_video(
                video=video_file,
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–µ—Ç–æ–¥: {method.capitalize()} Room\n"
                       f"üíµ –°–ø–∏—Å–∞–Ω–æ: {config.VIDEO_PRICE} RUB\n"
                       f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance - config.VIDEO_PRICE} RUB"
            )

    except Exception as e:
        logger.error(f"Video processing error: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    finally:
        await state.clear()

async def _download_video(bot, file_id: str, file_name: str) -> Optional[Path]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        file = await bot.get_file(file_id)
        if file.file_size > config.MAX_VIDEO_SIZE:
            return None

        download_path = config.TEMP_DIR / file_name
        await bot.download_file(file.file_path, destination=download_path)
        return download_path
    except Exception as e:
        logger.error(f"Download error: {e}")
        return None

@router.message(F.document, VideoProcessingStates.waiting_for_video)
async def process_video_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
    if message.document.mime_type and "video" in message.document.mime_type:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç video –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        message.video = message.document
        await process_video_message(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        await state.clear()

@router.callback_query(F.data == "cancel_processing")
async def cancel_processing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    await state.clear()
    await callback.message.edit_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()