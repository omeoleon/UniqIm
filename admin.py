import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from typing import Optional

from config import config
from database.models import User, Payment, VideoProcessing, Referral
from services.payments import payment_system
from utils.helpers import format_rub, format_bytes

router = Router()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_IDS = config.ADMIN_IDS

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
@router.message.middleware
async def admin_check_middleware(handler, event, data):
    if event.from_user.id not in ADMIN_IDS:
        await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    return await handler(event, data)

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = InlineKeyboardBuilder()
    buttons = [
        ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
        ("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "admin_finance"),
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
        ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "admin_settings")
    ]
    
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(2)
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="user_balance_edit")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_search")
    builder.button(text="üìã –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="user_top")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    total_users = await User.all().count()
    active_today = await User.filter(
        last_active__gte=datetime.now() - timedelta(days=1)
    ).count()
    
    await callback.message.edit_text(
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        f"–í—Å–µ–≥–æ: {total_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_today}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_finance")
async def admin_finance(callback: types.CallbackQuery):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∏ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="finance_all")
    builder.button(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="finance_period")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    total_payments = await Payment.filter(status="paid").count()
    total_amount = await Payment.filter(status="paid").sum("amount") or 0
    today_amount = await Payment.filter(
        status="paid",
        paid_at__gte=datetime.now().replace(hour=0, minute=0, second=0)
    ).sum("amount") or 0
    
    await callback.message.edit_text(
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n\n"
        f"–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: {format_rub(total_amount)}\n"
        f"–°–µ–≥–æ–¥–Ω—è: {format_rub(today_amount)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üé• –í–∏–¥–µ–æ", callback_data="stats_videos")
    builder.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="stats_refs")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    videos_processed = await VideoProcessing.all().count()
    refs_count = await Referral.all().count()
    
    await callback.message.edit_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {videos_processed}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")
    builder.button(text="üéØ –ü–æ —Ñ–∏–ª—å—Ç—Ä—É", callback_data="broadcast_filter")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await admin_panel(callback.message)
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "user_balance_edit")
async def user_balance_edit(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>123456789 500</code>"
    )
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
    await callback.answer("–†–µ–∞–ª–∏–∑—É–π—Ç–µ FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫")

@router.callback_query(F.data == "stats_videos")
async def stats_videos(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ"""
    methods = await VideoProcessing.all().group_by("method").count()
    stats_text = "üé• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ</b>\n\n"
    
    for method, count in methods.items():
        stats_text += f"{method}: {count}\n"
    
    await callback.message.edit_text(stats_text)
    await callback.answer()

__all__ = ['router']